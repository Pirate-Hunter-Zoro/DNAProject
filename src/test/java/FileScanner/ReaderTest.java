package FileScanner;

import SolvingProblem.SolverLCS;
import SolvingProblem.SolverNeedlemanWunsch;
import SolvingProblem.SolverSubstring;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.File;

import static org.junit.jupiter.api.Assertions.*;

class ReaderTest {

    private Reader reader1;
    private Reader reader2;
    private Reader reader3;

    private static final String EXPECTED_QUERY = "GGGGACCCAGTAACCACCAGCCCTAAGTGATCCGCTACAATCAAAAACCATCAGCAAGCAGGAAGGTACT" +
                                                    "CTTCTCAGTGGGCCTGGCTCCCCAGCTAAGACCTCAGGGACTTGAGGTAGGATATAGCCTCCTCTCTTAC" +
                                                    "GTGAAACTTTTGCTATCCTCAACCCAGCCTATCTTCCAGGTTATTGTTTCAACATGGCCCTGTGGATGCG" +
                                                    "CTTCCTGCCCCTGCTGGCCCTGCTCTTCCTCTGGGAGTCCCACCCCACCCAGGCTTTTGTCAAGCAGCAC" +
                                                    "CTTTGTGGTTCCCACCTGGTGGAGGCTCTCTACCTGGTGTGTGGGGAGCGTGGCTTCTTCTACACACCCA" +
                                                    "TGTCCCGCCGTGAAGTGGAGGACCCACAAGGTGAGTTCTGCCACTGAATTCTGTCCCCAGTGCTAACTAC" +
                                                    "CCTGGTTTTCTTCACACTTGGGACATTGTAAATTGTGTCCTAGGTGTGGAGGGTCTCGGGATAACCAGGG" +
                                                    "AGTGGGGACACGTTTCTGGGGGAAGCTAGACATATGTAAACATGGCAGCTGCCAGGAATGAGTAAGAATC" +
                                                    "CTGCCTTAAGGGGTCCTTGGTGGTAGTAACTTGGGACATGTGACTAGATCCCAGGATAGGTACCTATTTA" +
                                                    "GGGCCCTCATAGAGCACTGCACTGACTGAAGATGAGTAGGCTTTAGAGGCCCATGTGTCCATCCATGACC" +
                                                    "AGTGACTTGTCCCACAGGCATGCAACCCCTGCCACCTGCAGGGGTTAAGGGGCGAGAAAACCTGGGGTAG" +
                                                    "TAGGAGGTTGCTCAGCTACTCCTGACTGGATTTTCCTATGTGTCTTTGCTTCTGTGCTGCTGATGCCCTG" +
                                                    "GCCTGCTCTGACACAACCTCCCTGGCAGTGGCACAACTGGAGCTGGGTGGAGGCCCGGGAGCAGGTGACC" +
                                                    "TTCAGACCTTGGCACTGGAGGTGGCCCAGCAGAAGCGTGGCATTGTAGATCAGTGCTGCACCAGCATCTG" +
                                                    "CTCCCTCTACCAGCTGGAGAACTACTGCAACTAGACCCACCACTACCCAGCCTACCCCTCTGCAATGAAT" +
                                                    "AAAACCTTTGAATGAGCACAA";

    /**
     * Setup for each reader
     */
    @BeforeEach
    void setup(){
        reader1 = new Reader(new SolverLCS(), new File("DNA_query.txt"), new File("DNA_sequences.txt"));
        reader2 = new Reader(new SolverSubstring(), new File("DNA_query.txt"), new File("DNA_sequences.txt"));
        reader3 = new Reader(new SolverNeedlemanWunsch(), new File("DNA_query.txt"), new File("DNA_sequences.txt"));
    }

    /**
     * A simple test to ensure that the 'query' member was initialized properly
     */
    @Test
    void testQuery(){
        assertEquals(EXPECTED_QUERY, reader1.getQuery());
        assertEquals(EXPECTED_QUERY, reader2.getQuery());
        assertEquals(EXPECTED_QUERY, reader3.getQuery());
    }

    /**
     * A simple test to ensure that the description->DNASequence map was constructed correctly
     * Testing the first and last is good enough...
     */
    @Test
    void testMap(){
        String description = ">MH537830.1 Streptococcus pyogenes strain SH2902A RopB-like (ropB) genes";
        String expectedSequence = "ATGGAAATTGGTGAAACCGTTGAATTCATTAGGCATTCAAAAAACATTTCGATTAAACAAGTTTGTGGTG" +
                "ATTATCTCACTAGGCAAACCTATTATCGTTTTATTAAAAATAATCTTGACATTTCTTCGAAAAAGTTACT" +
                "TTATATCTTAGACAACTTGAATGTCAATGTTGATGAGTTTCTCTTTATTAGTAATAACTTTAAACAATAC" +
                "AAAGAATTTATTGATATGGATACGGCAAAACATTATTTTGAATGCCGAAACATAGAAGGTTTAAATCATA" +
                "TCCTTGATTCTTATAAAGATAGTAAGTAAACAAAGGAAAAGAACCTTTTTGCCTTGGTCAAGGTGTTATT" +
                "AGCAACTCTTACTGAGGAAGACTGTCTGACAGAGCGGACTTATTTGTCAAACTATCTTATTAATATTGAA" +
                "ACTTGGAGTCACTATGAGACTGTGCTTTTTAATAATTGTATGTTTATTTTTGAGTCTTGCTTTATTGAGA" +
                "TGGTGTTTTCAAAAGTTATTTTGAACCTCGATAAATACAATACCCTAAGGTATTATGGGAATGAATCGAT" +
                "TCGGATGTTTGTCAATATGTTGATTTTGTTTATTCAGCGACAAGAGTATGATAAAGCTTCTGAGATTTTG" +
                "GCAAAAATTGAAGATTATCAGCTAAATGATGATTGCTTATATGAACGGTGTTGTGTGTCTTTTTTTGATG" +
                "GCATTATTGGCCTCATAAATGGTAAAGAGGGGGCTGAGCAAAAGTGTGTGCAGATCTTGGAGATCTTCCA" +
                "ATTACTTAATTGCAAAACGATCCATCATATGTTTCAAACCTACCTAGAAGCCATTAAACATAAACTGTCC" +
                "TGA";
        assertEquals(expectedSequence, reader1.getDNASequence(description));

        description = ">AY092023.1 Gorilla gorilla insulin gene, partial cds";
        expectedSequence = "GTGCGGCTCCCACCTGGTGGAAGCTCTCTACCTAGTGTGCGGGGAACGAGGCTTCTTCTACACACCCAAGACCCGCCGGGAGGCAGAGGACCTGCAGGGTGAGCCAACCGCCCGTTGCTGCCCCTGGCCGCCCCCAGCCACCCCCTGCTCCTGGCGCTCCCACCCAGCATGGGCAGAAGGGGGCAGGAGGCTGCCACCCAGCAGGGGGTCAGGTGTACTTTTTTAAAAAGAAATGAAGTTCTCTTGGTCACGTCCTAAAAGTGACCAGCTCCCTGTGGCCCAGTCAGAGTCTCAGCCTGAGGACGGTGTTGGCTTCGGCAGCCCCGAGATACATCAGAGGGTGGGCACGCTCCTCCCTCCACTCGCCCCTCAAACAAATGCCCCGCAGCCCATTTCTCCACCCTCATTTGAAGACCTCAGATTCAAGTGTTAAGTCCTGGGTGACCTGGGGTCACAGGGTGCCCCACGCTGCCTGCCTCTGGGCGAACGCCCCATCACGCCCTGAGGAGGGCGTGGCTGCCTGCCTGAGTGGGCCAGACCCCTGTCGCCAGGCCTCACGGCAGCTCCATAGTCAGGAGATGGGGAAGATGCTGGGGACAGGCCCTGGGGAGAAGTACTGGGGCCACCTGTTCAGGCTCCCGCTGTGACACCGCCCCGGGGCAGGGGAAGGAGGTAGGACATGTGGGCGTTGGGGCCTGTAGGTCCACACCCAGTGTGGGTGACCCTCCCTCTAACCTGGGTCCAGCCCGGCTGGAGATGGGTGGGAGTGCAACCTAGGCCTGGTGGGCAGGCGGGCACTGTCTCTCCCTGACTGTGTCCTCCTGTGTCCCTCTGCCTCGCCGCTGTTCCGGAACCTGCTCTGCGCGGCGTGCCCTGGCAGTGGGGCAGGTGGAGCTGGGCGGGGGCCCTGGTGCAGGCAGCCTGCAGCCCTTGGCCCTGGAGGGGTCCCTGCAGAAGCGTGGCATCGTGGAACAATGC";
        assertEquals(expectedSequence.length(), reader1.getDNASequence(description).length());

        description = ">NC_000011.10:c2161209-2159779 Homo sapiens chromosome 11, GRCh38.p13 Insulin";
        expectedSequence = "AGCCCTCCAGGACAGGCTGCATCAGAAGAGGCCATCAAGCAGGTCTGTTCCAAGGGCCTTTGCGTCAGGT" +
                "GGGCTCAGGATTCCAGGGTGGCTGGACCCCAGGCCCCAGCTCTGCAGCAGGGAGGACGTGGCTGGGCTCG" +
                "TGAAGCATGTGGGGGTGAGCCCAGGGGCCCCAAGGCAGGGCACCTGGCCTTCAGCCTGCCTCAGCCCTGC" +
                "CTGTCTCCCAGATCACTGTCCTTCTGCCATGGCCCTGTGGATGCGCCTCCTGCCCCTGCTGGCGCTGCTG" +
                "GCCCTCTGGGGACCTGACCCAGCCGCAGCCTTTGTGAACCAACACCTGTGCGGCTCACACCTGGTGGAAG" +
                "CTCTCTACCTAGTGTGCGGGGAACGAGGCTTCTTCTACACACCCAAGACCCGCCGGGAGGCAGAGGACCT" +
                "GCAGGGTGAGCCAACTGCCCATTGCTGCCCCTGGCCGCCCCCAGCCACCCCCTGCTCCTGGCGCTCCCAC" +
                "CCAGCATGGGCAGAAGGGGGCAGGAGGCTGCCACCCAGCAGGGGGTCAGGTGCACTTTTTTAAAAAGAAG" +
                "TTCTCTTGGTCACGTCCTAAAAGTGACCAGCTCCCTGTGGCCCAGTCAGAATCTCAGCCTGAGGACGGTG" +
                "TTGGCTTCGGCAGCCCCGAGATACATCAGAGGGTGGGCACGCTCCTCCCTCCACTCGCCCCTCAAACAAA" +
                "TGCCCCGCAGCCCATTTCTCCACCCTCATTTGATGACCGCAGATTCAAGTGTTTTGTTAAGTAAAGTCCT" +
                "GGGTGACCTGGGGTCACAGGGTGCCCCACGCTGCCTGCCTCTGGGCGAACACCCCATCACGCCCGGAGGA" +
                "GGGCGTGGCTGCCTGCCTGAGTGGGCCAGACCCCTGTCGCCAGGCCTCACGGCAGCTCCATAGTCAGGAG" +
                "ATGGGGAAGATGCTGGGGACAGGCCCTGGGGAGAAGTACTGGGATCACCTGTTCAGGCTCCCACTGTGAC" +
                "GCTGCCCCGGGGCGGGGGAAGGAGGTGGGACATGTGGGCGTTGGGGCCTGTAGGTCCACACCCAGTGTGG" +
                "GTGACCCTCCCTCTAACCTGGGTCCAGCCCGGCTGGAGATGGGTGGGAGTGCGACCTAGGGCTGGCGGGC" +
                "AGGCGGGCACTGTGTCTCCCTGACTGTGTCCTCCTGTGTCCCTCTGCCTCGCCGCTGTTCCGGAACCTGC" +
                "TCTGCGCGGCACGTCCTGGCAGTGGGGCAGGTGGAGCTGGGCGGGGGCCCTGGTGCAGGCAGCCTGCAGC" +
                "CCTTGGCCCTGGAGGGGTCCCTGCAGAAGCGTGGCATTGTGGAACAATGCTGTACCAGCATCTGCTCCCT" +
                "CTACCAGCTGGAGAACTACTGCAACTAGACGCAGCCCGCAGGCAGCCCCACACCCGCCGCCTCCTGCACC" +
                "GAGAGAGATGGAATAAAGCCCTTGAACCAGC";
        assertEquals(expectedSequence.length(), reader1.getDNASequence(description).length());

    }

}